# ANSIBLE Behavior looking for ansible.cfg
# ansible.cfg  $CWD where play
# ~/.ansible.cfg
# /etc/ansible/ansible.cfg

[defaults]


ansible_managed = Ansible managed
								# given statement
								# used in config files with {{ ansible_managed }}
								# placeholder values can be added to the "given statement" {file} {host} {uid}
								# BUT "checkouts" can lead to false reported changes

ask_pass = False  				# ask for a password when running a playbook
ask_sudo_pass = False 			# ask for password when sudoing on tasks
ask_vault_pass = False 			# ask for vault password when running a playbook


# ANSIBLE PLUGINS, what are they, what do they do, how do we use them?
#	ALL /usr/bin/ansible-playbook core plugins are available.
#	*Dev Plugins ( know they can exist ) low-level extensions
#	source: http://docs.ansible.com/ansible/dev_guide/developing_plugins.html
								# 	types: cache, callback, connection, filters, lookup, strategy, SHELL, TEST, vars
action_plugins = [:] 			# list of dirs*
bin_ansible_callbacks = False 	# enable /usr/bin/ansible plugins
callback_plugins = [:]			# list of dirs*
callback_whitelist = [,]		# enables the core ansible callbacks "timer,mail"
connection_plugins = [:]		# list of dirs*
filter_plugins = [:]			# list of dirs*
lookup_plugins = [:]			# list of dirs*
strategy_plugins = [:]			# list of dirs*
vars_plugins = [:]				# list of dirs*


command_warnings = False 		# if a shell command has an ansible-module, info warn, can configure at the task level

deprecation_warnings = True		# informs of old-and-will-be-busted

display_args_to_stdout = False 	# can be good for debugging or testing, but can display sensitive info to standard out
								# tasks can override setting using no_log: True, reference: http://docs.ansible.com/ansible/faq.html#keep-secret-data								

display_skipped_hosts = True	# 

error_on_undefined_vars = True	# validates variables used in templates {{ my_typo_var }}

executable = /bin/sh 			# what command to spawn a shell (with sudo env) can be /bin/bash, or other shells
								# inventory variable ansible_shell_executable can get host specific ( alpine hosts don't have /bin/bash )

force_color = 1					# forces color mode

force_handlers = False 			# host operations via the handlers, can set at time of a play	
								# reference: http://docs.ansible.com/ansible/playbooks_error_handling.html#handlers-and-failure

forks = 5						# a number of parallel processes to spawn when communicating with remote hosts
								# CPU and Network Load are the real limitations, it's not core bound? 50 to 500 aren't uncommon values

fact_path = /etc/ansible/facts.d # globally config custom path for _local_facts::
								# only applies when play has "gather_facts: True"

gathering = implicit [explicit,smart]
								# fact cache ignored by default runs every play, unless play "gather_facts: False", explicit is the inverse of this behavior
								# smart runs when no fact cache is available about the host.
								# Using fact caching wisely can greatly improve the resilience of your cluster(s)

gathering_subset = all,[network,hardware,virtual,ohai,facter]
								# each subset has pros and cons
								# prepend values with ! to skip them, this includes all

hash_behaviour = replace		# does ansible replace or merge ( append ) to the dictionary of values?
								# variable overrides are done in a specific precedence order, if a change is determined 
								# by ansible hash_behaviour is leveraged.  it's rare to use anything but replace

host_key_checking = True		# remote 'cloudy' spaces... leave this True, on our HPC cluster we can probably set to False (an ssh check)

internal_poll_interval = 0.001	# in seconds, ansible process chatter.
								# large playbook > lower values > high cpu load
								# automation scenarios > higher values >  cpu usage could become a concern.
								# WAIT to set when scaling is an issue.

inventory = /etc/ansible/hosts 	# location of a file, script, or directory
								# inventory = ./dev 			# dev enviornment

inventroy_ignore_extensions = [,] # list of file types to ignore within the inventory setting
								# ~, .orig, .bak, .ini, .cfg, .retry, .pyc, .pyo
								# overwitten with env variable ANSIBLE_INVENTORY_IGNORE

jinja2_extensions = [,] 		# list of extentions*

library = /usr/share/ansible 	# location of the ansible modules
								# note the ./library.cfg file

local_tmp = ~/.ansible/tmp 		# ansible has to write to the fs on plays
								# in some odd cases writing to the users 'home dir' could be an issue of the adduser function didn't auto create the dir
								# writing to a known location like tmp might be better or not...

log_path=/var/log/ansible.log 	# need to make sure user running ansible can write to the dir
								# this is a local log cache, a service like splunk will read this file, setting up a log rotation would be wise. 


								# depricated by version 2.8
merge_multiple_cli_tags = False # cli behavior when using --tags and --skip-tags
								# false means only the last --tags or --skip-tags is used.
								# should probably just set to True so no future issues.

module_lang = LANG (en_US.UTF-8) # LANG is an env variable. 
								# dependent on module_set_locale = True

module_name = command 			# command module doesn't support several shell scripting convenstions.
								# docs recommended using 'shell' instead

module_set_locale = False 		# prepends local env variables, LANG, LC_MESSAGES, and LC_ALL being set.

module_utils = [:]				# python modules used to extend Ansible Modules, ./module_utils in the playbook will be used

nocolor = 0 					# on by default set to 1 for off.

nocows = 0 						# sys admin fun with cows... set to 1 if you don't like having fun.

pattern = a_name,an_ip?,a_host?	# might want to have a host meant to be a "mock" or an "opps" host.
								# has hosts = * as default if no 'hosts:' given all hosts will be reached.

poll_interval = 15 				# sets the default for asynchronous actions, check in interval, overwritten within a play
								# for more info on async: http://docs.ansible.com/ansible/playbooks_async.html

remote_port = 22 				# might want to push all of our automation through another port.
								# value can be specified at the inventory level for hosts where 22 is not available.

remote_tmp = ~/.ansible/tmp 	# the directory ansible will do it's remote magic from.

remote_user = root 				# default username ansible will connect as for /usr/bin/ansible-playbook, current user when none given

restrict_facts_namespace = False # restricts facts in own namespaces vs pushing to main?
								# not sure what is meant by 'main'
								# can set env variable ANSIBLE_RESTRICT_FACTS
								# looks like this is used when "testing" ?

retry_files_enabled = True 		# does ansible create a .retry file upon a failed playbook

retry_files_save_path = ~/.ansible/retry-files  # the location where the files are written 

roles_path = /opt/mysite/roles 	# where ansible look to resolve a role, first in ./roles/ subdir 
roles_path = [:]				# this pattern is if, again, vendor roles, or custom roles, etc..

squash_actions = [,] 			# used with_ looping, so like yum install x, yum install y, would be yum install x y
								# sorta a performance speed up

strategy = free 				# allows changes to the default ansible strategy.

sudo_exe = sudo 				# if host user escalation requires it

sudo_flags = -H -S -n 			# password-less sudo auth with "-n" can create issues, leave it or set it, i believe by default it's set.
								# ? what is meant by "password-less sudo auth"  because the ansible user is added to the /etc/sudoers file with what i think they mean

system_warnings = True 			# remote display of a warning related to ansible.

timeout = 10 					# default ssh timeout on connection attempts

transport = smart 				# "ssh" default, if OS supports "ControlPersist" will use paramiko, local, chroot, jail, etc.
								# recommended to leave as 'smart', and as needed changed as a play parameter using 'connection:'.



vault_password_file = ~/.vault_pass.txt  
								# can be an exicutable script, or file, can this be hashi corps consul?
								# all the possible options, this just uses standard in, out, and error.


[privilege_escalation]

become = False 					# switching users to run a command, best to set within the playbook as needed.

become_method = sudo 			# set the default method you want to switch users as
								# other options are su, pbrun, pfexec, doas, ksu

become_user = root 				# equivalent to ansible_sudo_user, or ansible_su_user for privilege escalation

become_ask_pass = False 		# ask for a password when escalating privileges

become_allow_same_user = False 	# odd setting... really surrounds SELinux.

[paramiko_connection]

record_host_keys = True 		# doesn't scale
								# depends on 'host key checking'

proxy_command = ssh -W "%h:%p" bastion
								# ssh tunnel, bastion, or jump host

[ssh_connection]
# openssh specific settings

ssh_args = [-o _option_]		# overrides ansibles default values.	

control_path=%(directory)s/ansible-ssh-%%h-%%p-%%r
control_path=%(directory)s/%%h-%%r   # if name will exceed char limits
								# location sockets are saved
								# socket names are limited to 108 characters for most platforms


control_path_dir = ~/.ansible/cp # this is the %(directory)s in control_path, path prefix

retries = 0 					# 0 is no retries, 1+ equals the number or retries
								# needed when transient network issues exist

scp_if_ssh = False 				# ONLY set to true if SFTP is not allowed on remote host.

pipelining = False 				# works by reducing the number of ssh operations on the remote server
								# if enabled, and using sudo operations does require that 'requiretty' is disabled in /etc/sudoers 
								# this is done with !requiretty

ssh_executable="/usr/local/bin/ssh"
								# specifiy the path to where the ssh cmd is, default behavior is $PATH firs ssh binary

[accelerate]
# only really needed if you can not enable pipelining within your enviornment.